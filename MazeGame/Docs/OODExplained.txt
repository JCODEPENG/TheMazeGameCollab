For our OOD, one main feature in our UML design is that we decided to implement a maze generator, that contains the algorithm that generates the maze. It then takes the generated maze and sends it to another the maze handler class which handles all the events that occur in the game. Events such as the maintenance of the locations of the mouse, cat and cheese and the interactions between them and the maze. As we believe that some people might keep a maze class that generates and maintains the maze all in one class, we argue that it is better to separate them. The main reason being that having everything within one class would be giving too many responsibilities and functionalities within one class, and thus, makes the purpose of the class unclear. Moreover, since the game must support the fact that the maze contains the mouse, cat, and cheese, in our OOD, the maze handler implements the mouse class, cat class and cheese class rather than vice versa. Although, the maze handler does do a lot of tasks, such as checking the position of the mouse or checking if the cat has eaten the mouse. We think this is the most optimal implementation of the game due to the convenience of accessing each character class since they are all instantiated within the one class. By having the other assets also declared within the class, it therefore makes it easier to assemble all the assets together and enforce the conditions of the game logic.